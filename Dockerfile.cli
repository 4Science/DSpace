# syntax=docker/dockerfile:1.7-labs
# This image will be published as dspace/dspace-cli
# See https://github.com/DSpace/DSpace/tree/main/dspace/src/main/docker for usage details
#
# - note: default tag for branch: 4science/dspace-cris-cli: 4science/dspace-cris-cli:dspace-cris-2023_02_x

# This Dockerfile uses JDK11 by default, but has also been tested with JDK17.
# To build with JDK17, use "--build-arg JDK_VERSION=17"
ARG JDK_VERSION=11
# The Docker version tag to build from
ARG DSPACE_VERSION=dspace-cris-2023_02_x
# The Docker registry to use for DSpace images. Defaults to "docker.io"
# NOTE: non-DSpace images are hardcoded to use "docker.io" and are not impacted by this build argument
ARG DOCKER_REGISTRY=docker.io
ARG AWS_REGION=eu-west-1

# Step 1 - Run Maven Build
FROM ${DOCKER_REGISTRY}/4science/dspace-cris-dependencies:${DSPACE_VERSION} AS build
ARG TARGET_DIR=dspace-installer
WORKDIR /app
# The dspace-installer directory will be written to /install
RUN mkdir -p /install /install/config /install/bin /install/solr \
    && chown -Rv dspace: /install \
    && chown -Rv dspace: /app
USER dspace
# Copy the DSpace source code (from local machine) into the workdir (excluding .dockerignore contents)
COPY --chown=dspace --parents pom.xml **/pom.xml /app/
COPY --chown=dspace --parents **/src /app/
# Build DSpace (note: this build doesn't include the optional, deprecated "dspace-rest" webapp)
# Copy the dspace-installer directory to /install.  Clean up the build to keep the docker image small
# Maven flags here ensure that we skip building test environment and skip all code verification checks.
# These flags speed up this compilation as much as reasonably possible.
ENV MAVEN_FLAGS="-P-assembly -P-test-environment -Denforcer.skip=true -Dcheckstyle.skip=true -Dlicense.skip=true -Dxml.skip=true"
RUN mvn -nsu -ntp package ${MAVEN_FLAGS}
# RUN java -Djarmode=layertools -jar /install/server-boot.jar extract --destination /install/server-boot
RUN mv /app/dspace/modules/server-boot/target/server-boot.jar /install/ && \
    mv /app/dspace/modules/server-boot/target/lib /install/

# Step 2 - Run installation
# Create a new tomcat image that does not retain the thze build directory contents
FROM docker.io/eclipse-temurin:${JDK_VERSION}-jre AS install
# Install unzip for AIPs
RUN apt-get update \
    && apt-get install -y --no-install-recommends unzip \
    && apt-get purge -y --auto-remove \
    && rm -rf /var/lib/apt/lists/*
# NOTE: DSPACE_INSTALL must align with the "dspace.dir" default configuration.
ENV DSPACE_INSTALL=/dspace
WORKDIR $DSPACE_INSTALL

RUN useradd -m -d /dspace -s /bin/bash dspace

#COPY --from=build --chown=dspace /install/server-boot/dependencies/ /app/server-boot/
#COPY --from=build --chown=dspace /install/server-boot/spring-boot-loader/ /app/server-boot/
#COPY --from=build --chown=dspace /install/server-boot/snapshot-dependencies/ /app/server-boot/
#COPY --from=build --chown=dspace /install/server-boot/application/ /app/server-boot/
COPY --from=build --chown=dspace /install/server-boot.jar /app/server-boot/
COPY --from=build --chown=dspace /install/lib/ /app/server-boot/lib/

COPY --chown=dspace dspace/config/ $DSPACE_INSTALL/config/
COPY --chown=dspace dspace/bin/ $DSPACE_INSTALL/bin/
RUN install -d -m 0755 -o dspace -g dspace $DSPACE_INSTALL/assetstore/ $DSPACE_INSTALL/upload/ \
    $DSPACE_INSTALL/handle-server/ $DSPACE_INSTALL/log/ \
    && ln -s /app/server-boot/BOOT-INF/lib $DSPACE_INSTALL/lib \
    && chown -h dspace:dspace $DSPACE_INSTALL/lib \
    && chmod +x $DSPACE_INSTALL/bin/*

USER dspace
ENV JAVA_OPTS="-Xmx1000m -Ddspace.dir=$DSPACE_INSTALL"