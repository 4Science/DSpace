# syntax=docker/dockerfile:1.7-labs
# This image will be published as dspace/dspace-dependencies
# The purpose of this image is to make the build for dspace/dspace run faster
#

# This Dockerfile uses JDK11 by default, but has also been tested with JDK17.
# To build with JDK17, use "--build-arg JDK_VERSION=17"
ARG JDK_VERSION=11

# Step 1 - Download all Dependencies
FROM docker.io/maven:3.9.9-eclipse-temurin-${JDK_VERSION} AS build
ENV JAVA_OPTS="-XX:+UseContainerSupport \
    -XX:MaxRAMPercentage=75.0 \
    -XX:InitialRAMPercentage=50.0 \
    -XX:+UseG1GC \
    -XX:+UseStringDeduplication" \
    MAVEN_OPTS="-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
ARG TARGET_DIR=dspace-installer
WORKDIR /app
# Create the 'dspace' user account & home directory
RUN groupadd -g 1001 dspace && \
    useradd -u 1001 -g dspace -m -d /dspace -s /bin/bash dspace
RUN chown -Rv dspace: /app

# Switch to dspace user & run below commands as that user
USER dspace

# This next part may look odd, but it speeds up the build of this image *significantly*.
# Copy ONLY the POMs to this image (from local machine). This will allow us to download all dependencies *without*
# performing any code compilation steps.

# Parent POM
COPY --chown=dspace --parents pom.xml **/pom.xml /app/dspace/

ENV MVN_FLAGS="-T2C --fail-never -B -P-assembly -P-test-environment -Denforcer.skip=true -Dcheckstyle.skip=true -Dlicense.skip=true -Dxjc.skip=true -Dxml.skip=true"
RUN mvn -f /app/dspace/pom.xml --fail-never dependency:go-offline ${MVN_FLAGS} -Daether.dependencyCollector.impl=bf

# Clear the contents of the /app directory (including all maven target folders), so no artifacts remain.
# This ensures when dspace:dspace is built, it will use the Maven local cache (~/.m2) for dependencies
USER root
RUN rm -rf /app/*
